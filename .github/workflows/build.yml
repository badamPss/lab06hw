name: CMake Build

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            package_type: deb
          - os: ubuntu-latest
            package_type: rpm
          - os: windows-latest
            package_type: msi
          - os: macos-latest
            package_type: dmg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential cmake
            if [ "${{ matrix.package_type }}" = "deb" ]; then
              sudo apt-get install -y devscripts debhelper
            elif [ "${{ matrix.package_type }}" = "rpm" ]; then
              sudo apt-get install -y rpm
            fi
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            choco install cmake
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install cmake
          fi

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Create build directory
        run: cmake -H. -B_build -DCMAKE_INSTALL_PREFIX=_install

      - name: Build
        run: cmake --build _build

      - name: Install
        run: cmake --build _build --target install

      - name: Run tests
        run: ctest --test-dir _build --output-on-failure

      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            if [ "${{ matrix.package_type }}" = "deb" ]; then
              cd _build
              cpack -G DEB
            elif [ "${{ matrix.package_type }}" = "rpm" ]; then
              cd _build
              cpack -G RPM
            fi
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            cd _build
            cpack -G WIX
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cd _build
            cpack -G DragNDrop
          fi

      - name: Create source archive
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          tar -czf solver-${VERSION}.tar.gz .
          zip -r solver-${VERSION}.zip .

      - name: Upload artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: packages-${{ matrix.os }}-${{ matrix.package_type }}
          path: |
            _build/*.deb
            _build/*.rpm
            _build/*.msi
            _build/*.dmg
            solver-*.tar.gz
            solver-*.zip

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            _build/*.deb
            _build/*.rpm
            _build/*.msi
            _build/*.dmg
            solver-*.tar.gz
            solver-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
